{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","border","overflowY","height","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","data","filteredRobot","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCASC,G,KAdJ,SAAC,GAAkB,EAAjBC,GAAkB,IAAfC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACpB,OAEC,yBAAKC,UAAU,+CAEd,yBAAKC,IAAI,oCAAoCC,IAAI,WACjD,6BACC,4BAAKJ,GACL,2BAAIC,OCmBOI,EA1BC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEjB,OAEC,6BAGEA,EAAOC,KAAI,SAACC,EAAMC,GAEjB,OAAQ,kBAAC,EAAD,CAELC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCEVU,EAnBC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAEjB,OAEE,yBAAKV,UAAU,MAEd,2BAAOW,KAAK,SAEVC,YAAY,mBACZZ,UAAU,oCACVa,SAAUH,MCwBDI,G,wDA7Bd,WAAYC,GAAO,IAAD,8BAEjB,cAAOA,IAEDC,MAAM,CAEVC,UAAU,GANK,E,8DAWAC,EAAMC,GAEvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAMzB,OAAGG,KAAKJ,MAAMC,SAEN,uDAGDG,KAAKL,MAAMO,a,GA1BQC,cCUbC,EAZF,SAACT,GAEb,OAEC,yBAAKU,MAAO,CAACC,OAAO,kBAAmBC,UAAU,SAASC,OAAO,UAC/Db,EAAMO,WCoDKO,E,kDAnDd,aAAc,IAAD,8BAEZ,gBAgBDC,eAAe,SAACC,GAEf,EAAKV,SAAS,CAACW,YAAaD,EAAME,OAAOC,SAhBzC,EAAKlB,MAAM,CAEVZ,OAAO,GACP4B,YAAY,IAPD,E,gEAWO,IAAD,OAElBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAE,EAAKlB,SAAS,CAACjB,OAAOmC,S,+BAU1B,IAAD,EAEoBnB,KAAKJ,MAAzBZ,EAFA,EAEAA,OAAO4B,EAFP,EAEOA,YACRQ,EAAcpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGtD,OAASvC,EAAOyC,OAEd,yBAAK7C,UAAU,MACZ,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,OAPA,2C,GAnCTjB,aCElBuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.c5e51318.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst Card=({id,name,email})=>{\r\n\treturn (\r\n\r\n\t\t<div className='bg-light-green dib br3 ma2 grow shadow-5 tc'>\r\n\r\n\t\t\t<img src='https://robohash.org/{id}?236x236' alt='robots' />\r\n\t\t\t<div >\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList= ({robots}) =>{\r\n\r\n\treturn(\r\n\r\n\t\t<div>\r\n\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i)=>{\r\n\r\n\t\t\t\t\treturn (<Card\r\n\r\n\t\t\t\t \t\t\tkey={i}\r\n\t\t\t\t \t\t\tid={robots[i].id }\r\n\t\t\t\t \t\t\tname={robots[i].name}\r\n\t\t\t\t \t\t\temail={robots[i].email}\r\n\r\n\t\t\t\t \t\t />)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\r\n\treturn(\r\n\r\n\t\t\t<div className='p2'>\r\n\r\n\t\t\t\t<input type='search'\r\n\r\n\t\t\t\t\t placeholder='Search robots...'\r\n\t\t\t\t\t className='pa2 ba b--green bg-lightest-blue '\r\n\t\t\t\t\t onChange={searchChange}\r\n\t\t\t\t />\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n\tconstructor(props){\r\n\r\n\t\tsuper (props);\r\n\r\n\t\t\tthis.state={\r\n\r\n\t\t\t\thasError: false\r\n\t\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error,info){\r\n\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tif(this.state.hasError){\r\n\r\n\t\t\treturn <h1>Opps . That is not good</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\r\n\treturn(\r\n\r\n\t\t<div style={{border:'2px solid black', overflowY:'scroll',height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default Scroll;","import React,{Component}  from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Scroll from '../components/Scroll';\r\nclass App extends Component {\r\n\r\n\r\n\tconstructor(){\r\n\r\n\t\tsuper ()\r\n\r\n\t\tthis.state={\r\n\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(data=>this.setState({robots:data}))\r\n\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\r\n\t\tthis.setState({searchField: event.target.value })\r\n\r\n\t}\r\n\r\n\t\r\n\trender(){\r\n\r\n\t\tconst {robots,searchField}=this.state;\r\n\t\tconst filteredRobot=robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t})\r\n\r\n\t\treturn( !robots.length ? <h1>loading</h1> :\r\n\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t  \t\t<h1 className='f1'> Robofriends </h1>\r\n\t\t\t  \t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t  \t\t<Scroll>\r\n\t\t\t  \t\t\t<ErrorBoundary>\r\n\t\t\t  \t\t\t\t<CardList robots={filteredRobot}/>\r\n\t\t\t  \t\t\t</ErrorBoundary>\r\n\t\t\t  \t\t</Scroll>\r\n\t\t  \t\t</div>\r\n\t\t\t\t\r\n\r\n\t\t\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}